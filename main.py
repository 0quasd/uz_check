import logging
import time
import os
import requests

from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ .env —Ñ–∞–π–ª—É ---
load_dotenv()

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –∫–≤–∏—Ç–∫—ñ–≤ ---
STATION_FROM_NAME = os.getenv("STATION_FROM_NAME")
STATION_TO_NAME = os.getenv("STATION_TO_NAME")
STATION_FROM_CODE = os.getenv("STATION_FROM_CODE")
STATION_TO_CODE = os.getenv("STATION_TO_CODE")
DEPARTURE_DATE = os.getenv("DEPARTURE_DATE")

# --- –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–∑ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –≤ —á–∏—Å–ª–æ) ---
try:
    SEARCH_INTERVAL_SECONDS = int(os.getenv("SEARCH_INTERVAL_SECONDS", 120))
    ALARM_INTERVAL_SECONDS = int(os.getenv("ALARM_INTERVAL_SECONDS", 5))
except (TypeError, ValueError):
    logging.error("–ù–µ–≤—ñ—Ä–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ —É .env —Ñ–∞–π–ª—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ.")
    SEARCH_INTERVAL_SECONDS = 120
    ALARM_INTERVAL_SECONDS = 5

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def send_telegram_message(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram."""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {'chat_id': CHAT_ID, 'text': message, 'parse_mode': 'Markdown'}
    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")

def check_for_trains():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ—Ç—è–≥—ñ–≤ –Ω–∞ —Å–∞–π—Ç—ñ booking.uz.gov.ua.
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–æ—Ç—è–≥, —ñ–Ω–∞–∫—à–µ False.
    """
    search_url = f"https://booking.uz.gov.ua/train-search/{STATION_FROM_CODE}/{STATION_TO_CODE}/?date={DEPARTURE_DATE}&time=00:00&by_route=1"
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage") # –í–∞–∂–ª–∏–≤–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –≤ Docker/Linux
    chrome_options.add_argument('user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36')
    
    driver = None
    try:
        # Selenium 4+ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–µ—Ä—É—î –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î –≤ PATH.
        # –¶–µ –Ω–∞–±–∞–≥–∞—Ç–æ –∫—Ä–∞—â–µ, –Ω—ñ–∂ –∂–æ—Ä—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å—É–≤–∞—Ç–∏ —à–ª—è—Ö.
        service = ChromeService() 
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.get(search_url)
        
        # –ß–µ–∫–∞—î–º–æ –¥–æ 20 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ—è–≤—É —Ö–æ—á–∞ –± –æ–¥–Ω—ñ—î—ó –∫–∞—Ä—Ç–∫–∏ –ø–æ—Ç—è–≥–∞
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div.results-list-item"))
        )
        
        logging.info("–ó–ù–ê–ô–î–ï–ù–û –ö–ê–†–¢–ö–£ –ü–û–¢–Ø–ì–ê!")
        return True

    except TimeoutException:
        logging.info("–ü–æ—Ç—è–≥–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return False
    except WebDriverException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ WebDriver: {e}. –ú–æ–∂–ª–∏–≤–æ, chromedriver –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤.")
        return False
    except Exception as e:
        logging.error(f"–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
        return False
    finally:
        if driver:
            driver.quit()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    if not all([BOT_TOKEN, CHAT_ID, STATION_FROM_CODE, STATION_TO_CODE, DEPARTURE_DATE]):
        logging.error("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–∞–¥–∞–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ BOT_TOKEN, CHAT_ID —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É.")
        return

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    
    start_message = (
        f"‚úÖ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!*\n\n"
        f"–ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç—è–≥—ñ–≤ –∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–º *{STATION_FROM_NAME} ‚Üí {STATION_TO_NAME}* "
        f"–Ω–∞ *{DEPARTURE_DATE}*.\n\n"
        f"–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—à—É–∫—É: *{SEARCH_INTERVAL_SECONDS}* —Å–µ–∫—É–Ω–¥. "
        f"–£ —Ä–∞–∑—ñ –∑–Ω–∞—Ö—ñ–¥–∫–∏, —ñ–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–æ–≤—ñ—â–µ–Ω—å: *{ALARM_INTERVAL_SECONDS}* —Å–µ–∫—É–Ω–¥."
    )
    send_telegram_message(start_message)
    
    try:
        while True:
            if check_for_trains():
                logging.info("–ü–û–¢–Ø–ì –ó–ù–ê–ô–î–ï–ù–û! –ü–µ—Ä–µ—Ö–æ–¥–∂—É –≤ —Ä–µ–∂–∏–º —Å–∏–≥–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó.")
                alarm_message = (
                    f"üö® *–£–í–ê–ì–ê! –ó'–Ø–í–ò–í–°–Ø –ü–û–¢–Ø–ì!* üö®\n\n"
                    f"–ú–∞—Ä—à—Ä—É—Ç: *{STATION_FROM_NAME} ‚Üí {STATION_TO_NAME}*\n"
                    f"–î–∞—Ç–∞: *{DEPARTURE_DATE}*\n\n"
                    f"*[–¢–ï–†–ú–Ü–ù–û–í–û –ü–ï–†–ï–í–Ü–†–Ø–ô–¢–ï –°–ê–ô–¢](https://booking.uz.gov.ua/)*"
                )
                # –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Ü–∏–∫–ª –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å, –¥–æ–∫–∏ –ø–æ—Ç—è–≥ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
                while check_for_trains():
                    send_telegram_message(alarm_message)
                    time.sleep(ALARM_INTERVAL_SECONDS)
                
                logging.info("–ü–æ—Ç—è–≥ –∑–Ω–∏–∫. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É.")
                send_telegram_message("‚úÖ *–ü–æ—Ç—è–≥ –∑–Ω–∏–∫*. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É.")

            else:
                logging.info(f"–ü–æ—Ç—è–≥—ñ–≤ –Ω–µ–º–∞—î. –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ {SEARCH_INTERVAL_SECONDS / 60:.1f} —Ö–≤.")
                time.sleep(SEARCH_INTERVAL_SECONDS)

    except KeyboardInterrupt:
        logging.info("–†–æ–±–æ—Ç—É –±–æ—Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")
        send_telegram_message("ÎÅÑ *–†–æ–±–æ—Ç—É –±–æ—Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ.*")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
        send_telegram_message(f"‚ùå *–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞!* \n\n`{e}`")


if __name__ == "__main__":
    main()
