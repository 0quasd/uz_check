# uz_monitor_github.py
import logging
import time
import os
from bs4 import BeautifulSoup

# --- –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –±—Ä–∞—É–∑–µ—Ä–∞ ---
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException, TimeoutException

# ==============================================================================
# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
# –¢–æ–∫–µ–Ω —ñ Chat ID —Ç–µ–ø–µ—Ä –±—É–¥—É—Ç—å –∑—á–∏—Ç—É–≤–∞—Ç–∏—Å—è –∑ GitHub Secrets
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –∫–≤–∏—Ç–∫—ñ–≤ ---
STATION_FROM_CODE = '2200300'
STATION_TO_CODE = '2218214'
DEPARTURE_DATE = '2025-06-29'
MIN_SEATS_REQUIRED = 1 # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ 1, —â–æ–± —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –±—É–¥—å-—è–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
SEAT_TYPE_LETTER = '–ö'

# --- –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (5 —Ö–≤–∏–ª–∏–Ω) ---
CHECK_INTERVAL_SECONDS = 300
# --- –Ü–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ (15 —Ö–≤–∏–ª–∏–Ω = 3 —Ü–∏–∫–ª–∏ –ø–æ 5 —Ö–≤–∏–ª–∏–Ω) ---
HEARTBEAT_INTERVAL_LOOPS = 3
# ==============================================================================

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def send_telegram_message(message):
    import requests
    if not BOT_TOKEN or not CHAT_ID:
        logging.error("BOT_TOKEN –∞–±–æ CHAT_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ GitHub Secrets.")
        return
        
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {'chat_id': CHAT_ID, 'text': message, 'parse_mode': 'Markdown'}
    try:
        requests.post(url, json=payload, timeout=10).raise_for_status()
        logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")

def check_uz_tickets():
    search_url = f"https://booking.uz.gov.ua/search-trips/{STATION_FROM_CODE}/{STATION_TO_CODE}/list?startDate={DEPARTURE_DATE}"
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--window-size=1920,1080")
    # –¶—ñ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤—ñ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ GitHub Actions
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    
    driver = None
    try:
        # –£ GitHub Actions Chrome —ñ chromedriver –±—É–¥—É—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        service = ChromeService()
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        logging.info(f"–ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä —ñ –∑–∞—Ö–æ–¥–∂—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
        driver.get(search_url)
        
        logging.info("–ß–µ–∫–∞—é, –ø–æ–∫–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∑'—è–≤–ª—è—Ç—å—Å—è –∫–∞—Ä—Ç–∫–∏ –∑ –ø–æ—Ç—è–≥–∞–º–∏...")
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CLASS_NAME, "TripUnit"))
        )
        
        html_content = driver.page_source
        logging.info("–°—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –ø–æ—á–∏–Ω–∞—é –∞–Ω–∞–ª—ñ–∑...")
        soup = BeautifulSoup(html_content, 'lxml')
        
        trip_cards = soup.find_all('div', class_='TripUnit')
        logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(trip_cards)} –∫–∞—Ä—Ç–æ–∫ –∑ –ø–æ—Ç—è–≥–∞–º–∏.")
        
        if not trip_cards:
            return False

        found_tickets_messages = []
        for card in trip_cards:
            train_number_div = card.find('div', class_='train-number')
            train_number = train_number_div.get_text(strip=True) if train_number_div else 'N/A'
            
            # ... (—Ä–µ—à—Ç–∞ –ª–æ–≥—ñ–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–∞–∫–æ—é –∂)
            wagon_types = card.find_all('div', class_='wagon-type')
            for wagon in wagon_types:
                wagon_type_name_div = wagon.find('div', class_='name')
                wagon_type_name = wagon_type_name_div.get_text(strip=True) if wagon_type_name_div else ''

                free_seats_div = wagon.find('div', class_='free-seats')
                free_seats = 0
                if free_seats_div:
                    try:
                        free_seats = int(free_seats_div.get_text(strip=True).split()[0])
                    except (ValueError, IndexError):
                        continue
                
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ, —è–∫ —Ç—ñ–ª—å–∫–∏ –∑–Ω–∞–π–¥–µ–Ω–æ —Ö–æ—á–∞ –± 1 –∫–≤–∏—Ç–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ç–∏–ø—É
                if "–∫—É–ø–µ" in wagon_type_name.lower() and free_seats >= MIN_SEATS_REQUIRED:
                    station_from_div = card.find('div', class_='station-from')
                    station_from = station_from_div.find('span', class_='name').get_text(strip=True) if station_from_div else 'N/A'
                    station_to_div = card.find('div', class_='station-to')
                    station_to = station_to_div.find('span', class_='name').get_text(strip=True) if station_to_div else 'N/A'
                    
                    message = (f"üéâ **–ó–ù–ê–ô–î–ï–ù–û –ö–í–ò–¢–û–ö!** üéâ\n\n"
                               f"**–ú–∞—Ä—à—Ä—É—Ç:** {station_from} -> {station_to}\n"
                               f"**–ü–æ—Ç—è–≥:** `{train_number}`\n"
                               f"**–¢–∏–ø –º—ñ—Å—Ü—å:** {wagon_type_name}\n"
                               f"**–í—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å:** *{free_seats}*")
                    send_telegram_message(message)
                    return True # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ True, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç
        
        logging.info("–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç—è–≥–∏, –∞–ª–µ –º—ñ—Å—Ü—å –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ç–∏–ø—É/–∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–º–∞—î.")
        return False

    except TimeoutException:
        logging.info("–ó–∞ 15 —Å–µ–∫—É–Ω–¥ –ø–æ—Ç—è–≥–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ –∑'—è–≤–∏–ª–∏—Å—å. –ô–º–æ–≤—ñ—Ä–Ω–æ, —ó—Ö –Ω–µ–º–∞—î.")
        return False
    except Exception as e:
        logging.error(f"–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return False
    finally:
        if driver:
            driver.quit()
            logging.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ.")

if __name__ == "__main__":
    if not BOT_TOKEN or not CHAT_ID:
        logging.error("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–µ–∫—Ä–µ—Ç–∏ BOT_TOKEN —Ç–∞ CHAT_ID –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó GitHub.")
    else:
        logging.info("–ë–æ—Ç-–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–≤–∏—Ç–∫—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ GitHub Actions.")
        send_telegram_message("‚úÖ **–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!**\n\n–ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–≤–∏—Ç–∫—ñ–≤. –ó–≤—ñ—Ç –ø—Ä–æ —Ä–æ–±–æ—Ç—É - –∫–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω.")
        
        loop_counter = 0
        while True:
            if check_uz_tickets():
                logging.info("–ö–≤–∏—Ç–∫–∏ –∑–Ω–∞–π–¥–µ–Ω–æ! –ó–∞–≤–µ—Ä—à—É—é —Ä–æ–±–æ—Ç—É.")
                send_telegram_message("‚úÖ **–ö–≤–∏—Ç–∫–∏ –∑–Ω–∞–π–¥–µ–Ω–æ!**\n\n–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞.")
                break
            
            loop_counter += 1
            time.sleep(CHECK_INTERVAL_SECONDS) # –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω

            if loop_counter % HEARTBEAT_INTERVAL_LOOPS == 0:
                send_telegram_message(f"‚åõÔ∏è *–ó–≤—ñ—Ç:* –ë–æ—Ç –ø—Ä–∞—Ü—é—î, –∫–≤–∏—Ç–∫—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î. –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ {int(CHECK_INTERVAL_SECONDS/60)} —Ö–≤.")
