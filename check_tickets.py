# check_tickets.py
import requests
import os
import logging
import sys

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
# –¶—ñ –∑–º—ñ–Ω–Ω—ñ –±—É–¥—É—Ç—å –∑—á–∏—Ç—É–≤–∞—Ç–∏—Å—è –∑ —Å–µ–∫—Ä–µ—Ç—ñ–≤ GitHub
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –∫–≤–∏—Ç–∫—ñ–≤
STATION_FROM_CODE = '2200300'  # –ö–æ–¥ —Å—Ç–∞–Ω—Ü—ñ—ó –•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π
STATION_TO_CODE = '2218214'    # –ö–æ–¥ —Å—Ç–∞–Ω—Ü—ñ—ó –õ–∞–∑–µ—â–∏–Ω–∞
DEPARTURE_DATE = '2025-06-29'  # –î–∞—Ç–∞, —è–∫—É –≤–∏ —à—É–∫–∞—î—Ç–µ (–†–†–†–†-–ú–ú-–î–î)
MIN_SEATS_REQUIRED = 8         # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å
SEAT_TYPE_LETTER = '–ö'         # "–ö" - –ö—É–ø–µ, "–õ" - –õ—é–∫—Å, "–ü" - –ü–ª–∞—Ü–∫–∞—Ä—Ç

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è GitHub Actions
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def send_telegram_message(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram."""
    if not BOT_TOKEN or not CHAT_ID:
        logging.error("TELEGRAM_BOT_TOKEN –∞–±–æ TELEGRAM_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        return

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")

def check_uz_tickets():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤ –Ω–∞ —Å–∞–π—Ç—ñ –£–∫—Ä–∑–∞–ª—ñ–∑–Ω–∏—Ü—ñ."""
    search_url = "https://booking.uz.gov.ua/train_search/"
    
    # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ User-Agent, —â–æ–± —ñ–º—ñ—Ç—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –≤—ñ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    data = {
        'from': STATION_FROM_CODE,
        'to': STATION_TO_CODE,
        'date': DEPARTURE_DATE,
        'time': '00:00'
    }

    try:
        logging.info(f"–ù–∞–¥—Å–∏–ª–∞—é –∑–∞–ø–∏—Ç –¥–æ –£–ó: {STATION_FROM_CODE} -> {STATION_TO_CODE} –Ω–∞ {DEPARTURE_DATE}")
        # –ü–µ—Ä–µ–¥–∞—î–º–æ –≤ –∑–∞–ø–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response = requests.post(search_url, headers=headers, data=data)
        response.raise_for_status()
        api_data = response.json()

        if api_data.get('error') or not api_data.get('data', {}).get('list'):
            logging.info("–ü–æ—Ç—è–≥—ñ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É —á–∏ –¥–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        found_tickets = []
        for train in api_data['data']['list']:
            for seat_type in train['types']:
                if seat_type['letter'] == SEAT_TYPE_LETTER and seat_type['places'] >= MIN_SEATS_REQUIRED:
                    message = (
                        f"üéâ **–ó–Ω–∞–π–¥–µ–Ω–æ –∫–≤–∏—Ç–∫–∏!** üéâ\n\n"
                        f"**–ú–∞—Ä—à—Ä—É—Ç:** {train['from']['station']} -> {train['to']['station']}\n"
                        f"**–ü–æ—Ç—è–≥:** `{train['num']}`\n"
                        f"**–î–∞—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:** {train['from']['date']}\n"
                        f"**–ß–∞—Å:** {train['from']['time']} -> {train['to']['time']}\n"
                        f"**–¢–∏–ø –º—ñ—Å—Ü—å:** –ö—É–ø–µ ({SEAT_TYPE_LETTER})\n"
                        f"**–ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å:** *{seat_type['places']}* (–ø–æ—Ç—Ä—ñ–±–Ω–æ {MIN_SEATS_REQUIRED})"
                    )
                    found_tickets.append(message)

        if found_tickets:
            full_message = "\n\n---\n\n".join(found_tickets)
            send_telegram_message(full_message)
        else:
            logging.info(f"–ö–≤–∏—Ç–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –¢–∏–ø: –ö—É–ø–µ ({SEAT_TYPE_LETTER}), –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {MIN_SEATS_REQUIRED}. –ü—Ä–æ–¥–æ–≤–∂—É—é –ø–æ—à—É–∫...")

    except requests.exceptions.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API –£–ó: {e}")
    except ValueError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ API –£–ó: {e}. –ú–æ–∂–ª–∏–≤–æ, –∑–º—ñ–Ω–∏–ª–∞—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ API.")
    except Exception as e:
        logging.error(f"–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    if not all([BOT_TOKEN, CHAT_ID]):
        print("–ü–û–ú–ò–õ–ö–ê: –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_BOT_TOKEN —Ç–∞ TELEGRAM_CHAT_ID.", file=sys.stderr)
        sys.exit(1)
    check_uz_tickets()
